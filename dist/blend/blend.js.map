{"version":3,"file":"blend.js","sourceRoot":"","sources":["../../blend/blend.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CAM16} from '../hct/cam16';\nimport {HCT} from '../hct/hct';\nimport * as mathUtils from '../utils/math_utils';\n\n/**\n * Functions for blending in HCT and CAM16.\n */\n\n// libmonet is designed to have a consistent API across platforms\n// and modular components that can be moved around easily. Using a class as a\n// namespace facilitates this.\n//\n// tslint:disable-next-line:class-as-namespace\nexport class Blend {\n  /**\n   * @param designColor ARGB representation of an arbitrary color.\n   * @param keyColor ARGB representation of the main theme color.\n   * @return The design color with a hue shifted towards the system's color,\n   *     a slightly warmer/cooler variant of the design color's hue.\n   */\n  static harmonize(designColor: number, sourceColor: number) {\n    const fromHct = HCT.fromInt(designColor);\n    const toHct = HCT.fromInt(sourceColor);\n    const differenceDegrees =\n        mathUtils.differenceDegrees(fromHct.hue, toHct.hue);\n    const rotationDegrees = Math.min(differenceDegrees * 0.5, 15.0);\n    const outputHue = mathUtils.sanitizeDegreesDouble(\n        fromHct.hue +\n        rotationDegrees * Blend.rotationDirection(fromHct.hue, toHct.hue));\n    return HCT.from(outputHue, fromHct.chroma, fromHct.tone).toInt();\n  }\n\n  /**\n   * Blends hue from one color into another. The chroma and tone of the original\n   * color are maintained.\n   *\n   * @param from ARGB representation of color\n   * @param to ARGB representation of color\n   * @param amount how much blending to perform; 0.0 >= and <= 1.0\n   * @return from, with a hue blended towards to. Chroma and tone are constant.\n   */\n  static hctHue(from: number, to: number, amount: number): number {\n    const ucsInt = Blend.cam16ucs(from, to, amount);\n    const ucs = HCT.fromInt(ucsInt);\n    const start = HCT.fromInt(from);\n    return HCT.from(ucs.hue, start.chroma, start.tone).toInt();\n  }\n\n  /**\n   * Blend in CAM16-UCS space.\n   *\n   * @param from ARGB representation of color\n   * @param to ARGB representation of color\n   * @param amount how much blending to perform; 0.0 >= and <= 1.0\n   * @return from, blended towards to. Hue, chroma, and tone will change.\n   */\n  static cam16ucs(from: number, to: number, amount: number): number {\n    const fromCAM16 = CAM16.fromInt(from);\n    const toCAM16 = CAM16.fromInt(to);\n\n    const aJstar = fromCAM16.jstar;\n    const aAstar = fromCAM16.astar;\n    const aBstar = fromCAM16.bstar;\n\n    const bJstar = toCAM16.jstar;\n    const bAstar = toCAM16.astar;\n    const bBstar = toCAM16.bstar;\n\n    const jstar = aJstar + (bJstar - aJstar) * amount;\n    const astar = aAstar + (bAstar - aAstar) * amount;\n    const bstar = aBstar + (bBstar - aBstar) * amount;\n\n    return CAM16.fromUcs(jstar, astar, bstar).viewedInSrgb();\n  }\n\n  /**\n   * Sign of direction change needed to travel from one angle to another.\n   *\n   * @param from The angle travel starts from, in degrees.\n   * @param to The angle travel ends at, in degrees.\n   * @return -1 if decreasing from leads to the shortest travel distance, 1 if\n   *    increasing from leads to the shortest travel distance.\n   */\n  private static rotationDirection(from: number, to: number): number {\n    const a = to - from;\n    const b = to - from + 360.0;\n    const c = to - from - 360.0;\n\n    const aAbs = Math.abs(a);\n    const bAbs = Math.abs(b);\n    const cAbs = Math.abs(c);\n\n    if (aAbs <= bAbs && aAbs <= cAbs) {\n      return a >= 0.0 ? 1 : -1;\n    }\n\n    if (bAbs <= aAbs && bAbs <= cAbs) {\n      return b >= 0.0 ? 1 : -1;\n    }\n\n    return c >= 0.0 ? 1 : -1;\n  }\n}\n"]}